import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
    id "java"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2019.4.1"
}

wrapper {
    gradleVersion = "5.4"
}

def ROBOT_MAIN_CLASS = ""
def TEAM_NUMBER = 4362

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            team = TEAM_NUMBER
        }
    }

    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }

        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    jcenter()
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4, some Matrix math from the government, some Jsoning from Google,
// some CSVing from the community, and logging from the man Oblarg
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()

    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'

    compile 'com.moandjiezana.toml:toml4j:0.7.2'
    compile 'gov.nist.math:jama:1.0.3'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'com.github.Oblarg:Oblog:2.12.7'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

task getAllArtifacts() {
    doLast {
        project.configurations.each { Configuration conf ->
            if(!conf.canBeResolved) {
                return
            }

            println("Resolving: " + conf.getName())
            conf.resolvedConfiguration.resolvedArtifacts.each { ResolvedArtifact art ->
                art.file    // Needed to trigger download
            }
        }
    }
}
